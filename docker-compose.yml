services:
  postgres:
    image: postgres:15-alpine
    container_name: eventos361-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-controlevacinacaoeco}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-Kokorozzdew1455}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=pt_BR.UTF-8 --lc-ctype=pt_BR.UTF-8"
      TZ: ${TZ:-America/Sao_Paulo}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d
    networks:
      - eventos361-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d controlevacinacaoeco"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  redis:
    image: redis:7-alpine
    container_name: eventos361-redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - eventos361-network
    environment:
      TZ: ${TZ:-America/Sao_Paulo}
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    command: redis-server --appendonly yes --requirepass ""

  # Opcional: Adminer para administração do banco
  adminer:
    image: adminer:latest
    container_name: eventos361-adminer
    ports:
      - "${ADMINER_PORT:-8080}:8080"
    networks:
      - eventos361-network
    depends_on:
      - postgres
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DESIGN: "bootstrap"

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  eventos361-network:
    driver: bridge
